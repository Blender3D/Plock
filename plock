#!/usr/bin/env python2

import sys, os
import getpass

from PyQt4 import QtCore, QtGui

from PyQt4.QtCore import *
from PyQt4.QtGui import *
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created: Sat Jun  2 13:21:54 2012
#      by: PyQt4 UI code generator 4.9.1
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
  _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
  _fromUtf8 = lambda s: s

class Ui_MainWindow(object):
  def setupUi(self, MainWindow):
    MainWindow.setObjectName(_fromUtf8("MainWindow"))
    MainWindow.resize(1290, 604)
    MainWindow.setMouseTracking(True)
    MainWindow.setAutoFillBackground(True)
    self.centralwidget = QtGui.QWidget(MainWindow)
    self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
    self.gridLayout_2 = QtGui.QGridLayout(self.centralwidget)
    self.gridLayout_2.setObjectName(_fromUtf8("gridLayout_2"))
    spacerItem = QtGui.QSpacerItem(20, 5000, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
    self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
    spacerItem1 = QtGui.QSpacerItem(5000, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
    self.gridLayout_2.addItem(spacerItem1, 1, 0, 1, 1)
    self.frame = QtGui.QFrame(self.centralwidget)
    sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
    sizePolicy.setHorizontalStretch(0)
    sizePolicy.setVerticalStretch(0)
    sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
    self.frame.setSizePolicy(sizePolicy)
    self.frame.setMinimumSize(QtCore.QSize(400, 0))
    self.frame.setAutoFillBackground(False)
    self.frame.setStyleSheet(_fromUtf8("#frame {\n"
"  border: 8px solid palette(highlight);\n"
"  background: palette(window);\n"
"}\n"
"\n"
"QToolButton {\n"
"  padding: 7px;\n"
"  padding-top: 0px;\n"
"}"))
    self.frame.setFrameShape(QtGui.QFrame.StyledPanel)
    self.frame.setObjectName(_fromUtf8("frame"))
    self.gridLayout = QtGui.QGridLayout(self.frame)
    self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
    self.headerLabel = QtGui.QLabel(self.frame)
    self.headerLabel.setAlignment(QtCore.Qt.AlignCenter)
    self.headerLabel.setObjectName(_fromUtf8("headerLabel"))
    self.gridLayout.addWidget(self.headerLabel, 0, 0, 1, 1)
    self.formLayout = QtGui.QFormLayout()
    self.formLayout.setObjectName(_fromUtf8("formLayout"))
    self.label = QtGui.QLabel(self.frame)
    self.label.setObjectName(_fromUtf8("label"))
    self.formLayout.setWidget(0, QtGui.QFormLayout.LabelRole, self.label)
    self.statusMessage = QtGui.QLabel(self.frame)
    self.statusMessage.setObjectName(_fromUtf8("statusMessage"))
    self.formLayout.setWidget(1, QtGui.QFormLayout.FieldRole, self.statusMessage)
    self.passwordTextbox = QtGui.QLineEdit(self.frame)
    self.passwordTextbox.setEchoMode(QtGui.QLineEdit.Password)
    self.passwordTextbox.setObjectName(_fromUtf8("passwordTextbox"))
    self.formLayout.setWidget(0, QtGui.QFormLayout.FieldRole, self.passwordTextbox)
    self.gridLayout.addLayout(self.formLayout, 2, 0, 1, 1)
    self.horizontalLayout = QtGui.QHBoxLayout()
    self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
    self.unlockButton = QtGui.QToolButton(self.frame)
    self.unlockButton.setMinimumSize(QtCore.QSize(80, 0))
    self.unlockButton.setStyleSheet(_fromUtf8(""))
    icon = QtGui.QIcon()
    icon.addPixmap(QtGui.QPixmap(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
    self.unlockButton.setIcon(icon)
    self.unlockButton.setIconSize(QtCore.QSize(32, 32))
    self.unlockButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
    self.unlockButton.setObjectName(_fromUtf8("unlockButton"))
    self.horizontalLayout.addWidget(self.unlockButton)
    self.switchButton = QtGui.QToolButton(self.frame)
    self.switchButton.setMinimumSize(QtCore.QSize(80, 0))
    self.switchButton.setIcon(icon)
    self.switchButton.setIconSize(QtCore.QSize(32, 32))
    self.switchButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
    self.switchButton.setObjectName(_fromUtf8("switchButton"))
    self.horizontalLayout.addWidget(self.switchButton)
    self.shutdownButton = QtGui.QToolButton(self.frame)
    self.shutdownButton.setMinimumSize(QtCore.QSize(80, 0))
    self.shutdownButton.setIcon(icon)
    self.shutdownButton.setIconSize(QtCore.QSize(32, 32))
    self.shutdownButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
    self.shutdownButton.setObjectName(_fromUtf8("shutdownButton"))
    self.horizontalLayout.addWidget(self.shutdownButton)
    self.rebootButton = QtGui.QToolButton(self.frame)
    self.rebootButton.setMinimumSize(QtCore.QSize(80, 0))
    self.rebootButton.setIcon(icon)
    self.rebootButton.setIconSize(QtCore.QSize(32, 32))
    self.rebootButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
    self.rebootButton.setObjectName(_fromUtf8("rebootButton"))
    self.horizontalLayout.addWidget(self.rebootButton)
    self.gridLayout.addLayout(self.horizontalLayout, 3, 0, 1, 1)
    self.line = QtGui.QFrame(self.frame)
    self.line.setFrameShape(QtGui.QFrame.HLine)
    self.line.setFrameShadow(QtGui.QFrame.Sunken)
    self.line.setObjectName(_fromUtf8("line"))
    self.gridLayout.addWidget(self.line, 1, 0, 1, 1)
    self.gridLayout_2.addWidget(self.frame, 1, 1, 1, 1)
    spacerItem2 = QtGui.QSpacerItem(5000, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
    self.gridLayout_2.addItem(spacerItem2, 1, 2, 1, 1)
    spacerItem3 = QtGui.QSpacerItem(20, 5000, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
    self.gridLayout_2.addItem(spacerItem3, 2, 1, 1, 1)
    MainWindow.setCentralWidget(self.centralwidget)

    self.retranslateUi(MainWindow)
    QtCore.QObject.connect(self.passwordTextbox, QtCore.SIGNAL(_fromUtf8("returnPressed()")), self.unlockButton.click)
    QtCore.QMetaObject.connectSlotsByName(MainWindow)

  def retranslateUi(self, MainWindow):
    MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
    self.headerLabel.setText(QtGui.QApplication.translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">The screen has been locked by {}</span></p></body></html>", None, QtGui.QApplication.UnicodeUTF8))
    self.label.setText(QtGui.QApplication.translate("MainWindow", "Enter your password:", None, QtGui.QApplication.UnicodeUTF8))
    self.statusMessage.setText(QtGui.QApplication.translate("MainWindow", "<span style=\" color:red;\">You have entered an invalid password</span>", None, QtGui.QApplication.UnicodeUTF8))
    self.unlockButton.setText(QtGui.QApplication.translate("MainWindow", "&Unlock", None, QtGui.QApplication.UnicodeUTF8))
    self.switchButton.setText(QtGui.QApplication.translate("MainWindow", "S&witch User", None, QtGui.QApplication.UnicodeUTF8))
    self.shutdownButton.setText(QtGui.QApplication.translate("MainWindow", "Shut &Down", None, QtGui.QApplication.UnicodeUTF8))
    self.rebootButton.setText(QtGui.QApplication.translate("MainWindow", "&Restart", None, QtGui.QApplication.UnicodeUTF8))


from ctypes import CDLL, POINTER, Structure, CFUNCTYPE, cast, pointer, sizeof
from ctypes import c_void_p, c_uint, c_char_p, c_char, c_int
from ctypes.util import find_library

LIBPAM = CDLL(find_library('pam'))
LIBC = CDLL(find_library('c'))

CALLOC = LIBC.calloc
CALLOC.restype = c_void_p
CALLOC.argtypes = [c_uint, c_uint]

STRDUP = LIBC.strdup
STRDUP.argstypes = [c_char_p]
STRDUP.restype = POINTER(c_char)

class PamHandle(Structure):
  _fields_ = [('handle', c_void_p)]
  
  def __init__(self):
    Structure.__init__(self)
    self.handle = 0

class PamMessage(Structure):  _fields_ = [('msg_style', c_int), ('msg', c_char_p)]
class PamResponse(Structure):  _fields_ = [('resp', c_char_p), ('resp_retcode', c_int)]

CONV_FUNC = CFUNCTYPE(c_int, c_int, POINTER(POINTER(PamMessage)), POINTER(POINTER(PamResponse)), c_void_p)

class PamConv(Structure):  _fields_ = [('conv', CONV_FUNC), ('appdata_ptr', c_void_p)]

PAM_START = LIBPAM.pam_start
PAM_START.restype = c_int
PAM_START.argtypes = [c_char_p, c_char_p, POINTER(PamConv), POINTER(PamHandle)]

PAM_AUTHENTICATE = LIBPAM.pam_authenticate
PAM_AUTHENTICATE.restype = c_int
PAM_AUTHENTICATE.argtypes = [PamHandle, c_int]



class StartQT4(QMainWindow):
  def __init__(self, parent = None):
    QWidget.__init__(self, parent)
    
    self.ui = Ui_MainWindow()
    self.ui.setupUi(self)
    self.showFullScreen()

    self.background = QImage('/usr/share/backgrounds/skippin___skool_by_ether.jpg')
    self.draw_type = 'stretch'
    
    #self.setCursor(QCursor(Qt.BlankCursor))
    
    self.ui.headerLabel.setText(str(self.ui.headerLabel.text()).format(getpass.getuser()))
    
    self.ui.statusMessage.hide()

    self.ui.unlockButton.setIcon(self.fixIcon(QIcon.fromTheme('system-lock-screen')))
    self.ui.switchButton.setIcon(self.fixIcon(QIcon.fromTheme('system-switch-user')))
    self.ui.shutdownButton.setIcon(self.fixIcon(QIcon.fromTheme('system-shutdown')))
    self.ui.rebootButton.setIcon(self.fixIcon(QIcon.fromTheme('system-reboot')))
    
    self.connect(self.ui.unlockButton, SIGNAL('clicked()'), self.unlock)
    self.connect(self.ui.switchButton, SIGNAL('clicked()'), self.switch)
    self.connect(self.ui.shutdownButton, SIGNAL('clicked()'), self.shutdown)
    self.connect(self.ui.rebootButton, SIGNAL('clicked()'), self.reboot)

    self.installEventFilter(self)
    QTimer.singleShot(10, self.ready)
    
  def ready(self):
    self.ui.passwordTextbox.grabKeyboard()
  
  def closeEvent(self, event):
    event.ignore()
  
  def eventFilter(self, source, event):
    if type(event) == QHoverEvent:
      widget = QApplication.widgetAt(event.pos())

      if widget:
        if type(widget) == QFrame:
          self.ui.passwordTextbox.grabKeyboard()

    return False
    
  def fixIcon(self, icon):
    image = QImage(icon.pixmap(QSize(36, 36)))
    size = icon.actualSize(QSize(36, 36))
    
    return QIcon(QPixmap.fromImage(image))
  
  def paintEvent(self, event):
    painter = QPainter(self)

    if self.draw_type == 'stretch':
      painter.drawImage(0, 0, self.background.scaled(self.size()))
    else:
      painter.drawImage(0, 0, self.background)

  
  def shutdown(self):
    os.system('shutdown now')
  
  def reboot(self):
    os.system('reboot')
  
  def switch(self):
    os.system('/usr/lib/lightdm/lightdm/gdmflexiserver')
  
  def unlock(self):
    @CONV_FUNC
    def my_conv(n_messages, messages, p_response, app_data):
      addr = CALLOC(n_messages, sizeof(PamResponse))
      p_response[0] = cast(addr, POINTER(PamResponse))

      for i in range(n_messages):
        if messages[i].contents.msg_style == 1:
          pw_copy = STRDUP(str(self.ui.passwordTextbox.text()))
          p_response.contents[i].resp = cast(pw_copy, c_char_p)
          p_response.contents[i].resp_retcode = 0
      
      return 0
    
    handle = PamHandle()
    conv = PamConv(my_conv, 0)
    
    if PAM_START('login', getpass.getuser(), pointer(conv), pointer(handle)) != 0 or PAM_AUTHENTICATE(handle, 0) != 0:
      self.ui.statusMessage.setText('<span style="color:red;">You have entered an invalid password</span>')
      self.ui.statusMessage.show()
    else:
      sys.exit(0)

if __name__ == '__main__':
  app = QApplication(sys.argv)
  lockscreen = StartQT4()
  lockscreen.show()
  
  sys.exit(app.exec_())
